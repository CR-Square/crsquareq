{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "f80eb2378d900b745f6ac06d6bacf1168a328c3d823c57d6ea872479401ddca9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "435bfd183fceabd6b2abe9698a7451d1991dbb535e6aa07ea1b803d79095ec86",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "2adafe9949c9eac3b63c5a50ef9b209c88f2f1e21ebf5e893575b024bc40f353",
          "withoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc",
          "linkedWithoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Factory": {
        "src": "contracts/ProjectAndProposal.sol:7",
        "version": {
          "withMetadata": "cb640d81db9ffbfd2c3c9eb3600183773ca6c873629a03ddb4af370e37a53d81",
          "withoutMetadata": "15e9d5d93ccef5a9fcf1bd5c3ada530f5c3f0a1cae02ccf3ae88953b6de0b81d",
          "linkedWithoutMetadata": "15e9d5d93ccef5a9fcf1bd5c3ada530f5c3f0a1cae02ccf3ae88953b6de0b81d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addValidators(address)",
          "returnArray()",
          "checkValidatorIsRegistered(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "allValidatorsArray",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/ProjectAndProposal.sol:9"
            },
            {
              "label": "validatorBoolean",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/ProjectAndProposal.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Founder": {
        "src": "contracts/Vesting.sol:6",
        "version": {
          "withMetadata": "6cd40af78fd492ca1ba745b2b11f44748992ebdc21c8b0ecc6e320fb4fffb636",
          "withoutMetadata": "38524b04361857a72477e853b9a95074a38ee23b588fcb94653d888546ba963f",
          "linkedWithoutMetadata": "38524b04361857a72477e853b9a95074a38ee23b588fcb94653d888546ba963f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addFounder(address)",
          "verifyFounder(address)",
          "getAllFounderAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isFounder",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Founder",
              "src": "contracts/Vesting.sol:8"
            },
            {
              "label": "pushFounders",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Founder",
              "src": "contracts/Vesting.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "InvestorLogin": {
        "src": "contracts/PrivateRound.sol:29",
        "version": {
          "withMetadata": "8e8025c96c92ea21193cae7d701a6c84a11b073e2d2cdad38c18e4297d551310",
          "withoutMetadata": "f164b672f99deb5ee94662ee87d74f08de0eb76ee32a6cfc79cce187b8597622",
          "linkedWithoutMetadata": "f164b672f99deb5ee94662ee87d74f08de0eb76ee32a6cfc79cce187b8597622"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "addInvestor(address)",
          "verifyInvestor(address)",
          "getAllInvestorAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isInvestor",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "InvestorLogin",
              "src": "contracts/PrivateRound.sol:31"
            },
            {
              "label": "pushInvestors",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "InvestorLogin",
              "src": "contracts/PrivateRound.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "FundLock": {
        "src": "contracts/PrivateRound.sol:347",
        "version": {
          "withMetadata": "0a62c567dc17037fbd07d6678edc853dd791a2d569ef0d0bd3bc9c1c65115d35",
          "withoutMetadata": "210445866bbf1c86c86571c6e4254eb782c5a1cf53cc0e1bce35876d11424b0d",
          "linkedWithoutMetadata": "210445866bbf1c86c86571c6e4254eb782c5a1cf53cc0e1bce35876d11424b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FundLock",
            "src": "contracts/PrivateRound.sol:351"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_contractOwner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "FundLock",
              "src": "contracts/PrivateRound.sol:348"
            },
            {
              "label": "_amount",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "FundLock",
              "src": "contracts/PrivateRound.sol:349"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PrivateRound": {
        "src": "contracts/PrivateRound.sol:58",
        "version": {
          "withMetadata": "37c4dbb2c3ad0054fe32022e372413c2e40b4890ed1bb8408474390e249a7605",
          "withoutMetadata": "3e41f8db0a517ec70c7c245b695bdcff4c1cce1cbc03e111b04f4cad4b881f4a",
          "linkedWithoutMetadata": "3e41f8db0a517ec70c7c245b695bdcff4c1cce1cbc03e111b04f4cad4b881f4a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "createPrivateRound(uint256,address,uint256,struct PrivateRound.MilestoneSetup[])",
          "depositTokens(address,address,address,uint256,uint256)",
          "withdrawInitialPercentage(address,address,uint256)",
          "milestoneValidationRequest(address,uint256,uint256)",
          "validateMilestone(address,uint256,uint256,bool)",
          "withdrawIndividualMilestoneByFounder(address,address,uint256,uint256,uint256,address)",
          "withdrawIndividualMilestoneByInvestor(address,uint256,address,uint256,uint256,address)",
          "batchWithdrawByInvestors(address,uint256,address,address)",
          "changeAdminAddress(address)",
          "withdrawTaxTokens(address)",
          "milestoneStatusChk(uint256,uint256)",
          "getContractAddress(uint256)",
          "projectStatus(uint256)",
          "tokenStatus(uint256,address,address)",
          "investorWithdrawnToken(address,uint256)",
          "readTaxFee(uint256)",
          "milestoneWithdrawStatus(uint256,uint256)",
          "initialWithdrawStatus(uint256,address)",
          "availableTaxTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_milestone",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(MilestoneSetup)2333_storage)dyn_storage))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:60"
            },
            {
              "label": "initialPercentage",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:61"
            },
            {
              "label": "seperateContractLink",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:62"
            },
            {
              "label": "roundIdControll",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:63"
            },
            {
              "label": "contractOwner",
              "offset": 0,
              "slot": "205",
              "type": "t_address",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:64"
            },
            {
              "label": "tokenContract",
              "offset": 0,
              "slot": "206",
              "type": "t_address",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:80"
            },
            {
              "label": "remainingTokensOfInvestor",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:111"
            },
            {
              "label": "totalTokensOfInvestor",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:112"
            },
            {
              "label": "initialTokensForFounder",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:113"
            },
            {
              "label": "initialWithdrawalStatus",
              "offset": 0,
              "slot": "210",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:114"
            },
            {
              "label": "contractAddress",
              "offset": 0,
              "slot": "211",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:115"
            },
            {
              "label": "taxedTokens",
              "offset": 0,
              "slot": "212",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:133"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "213",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:134"
            },
            {
              "label": "rejectedByInvestor",
              "offset": 0,
              "slot": "214",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:152"
            },
            {
              "label": "projectCancel",
              "offset": 0,
              "slot": "215",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:153"
            },
            {
              "label": "requestForValidation",
              "offset": 0,
              "slot": "216",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:154"
            },
            {
              "label": "milestoneApprovalStatus",
              "offset": 0,
              "slot": "217",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:155"
            },
            {
              "label": "milestoneWithdrawalStatus",
              "offset": 0,
              "slot": "218",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:156"
            },
            {
              "label": "defaultedByFounder",
              "offset": 0,
              "slot": "219",
              "type": "t_bool",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:183"
            },
            {
              "label": "investorWithdrawnTokens",
              "offset": 0,
              "slot": "220",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "PrivateRound",
              "src": "contracts/PrivateRound.sol:238"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(MilestoneSetup)2333_storage)dyn_storage": {
              "label": "struct PrivateRound.MilestoneSetup[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(MilestoneSetup)2333_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct PrivateRound.MilestoneSetup[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(MilestoneSetup)2333_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct PrivateRound.MilestoneSetup[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_int256)": {
              "label": "mapping(uint256 => int256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
              "label": "mapping(uint256 => mapping(address => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
              "label": "mapping(uint256 => mapping(uint256 => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(uint256 => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))": {
              "label": "mapping(uint256 => mapping(uint256 => int256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(MilestoneSetup)2333_storage": {
              "label": "struct PrivateRound.MilestoneSetup",
              "members": [
                {
                  "label": "_num",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_date",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_percent",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ProjectAndProposal": {
        "src": "contracts/ProjectAndProposal.sol:60",
        "version": {
          "withMetadata": "b738e706e117da8e313986dc8f5d9706a257f33db93227f95020aaaed837903f",
          "withoutMetadata": "d29b1ba5b31bdf04efb019c65310a85d1c3706f60857645468baad3482b7c0ed",
          "linkedWithoutMetadata": "d29b1ba5b31bdf04efb019c65310a85d1c3706f60857645468baad3482b7c0ed"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFounderAndCycleForTheProject(address,address,uint256,uint256)",
          "setInitialId(address,address,uint256,uint256,uint256)",
          "setSubsequentId(address,uint256,uint256)",
          "Validate(bool,address,address,uint256,uint256)",
          "getWhitelistedTokenAddresses(bytes32)",
          "depositStableTokens(address,address,uint256,bytes32,address,uint256,uint256)",
          "withdrawSubsequentStableCoins(uint256,address,bytes32,uint256)",
          "withdrawTokensByInvestor(address,address,bytes32,uint256)",
          "Withdraw10PercentOfStableCoin(address,address,address,bytes32,uint256)",
          "_getProjectEscrowBalance(uint256,address)",
          "_getInvestorInvestedBalance(uint256,address)",
          "_getInvestorCurrentBalance(uint256,address)",
          "_getTotalReleasedFundsToFounderFromEscrow(uint256,address)",
          "_getInitialProposalRequestedFund(uint256,uint256)",
          "_getSubsequentProposalFund(uint256,uint256)",
          "_getProjectCycles(uint256)",
          "_getProjectCurrentCycle(uint256)",
          "_getSubsequentProposalStatus(uint256,uint256)",
          "_getRejectedSubsequentProposalsCount(uint256)",
          "_getProjectStatus(uint256)",
          "_approvedValidators(uint256,uint256)",
          "_rejectedValidators(uint256,uint256)",
          "_getProjectCurrentEscrowBalance(uint256)",
          "_getTheTenpercentWithdrawalStatus(uint256,address)",
          "_getTheSubsequentProposalWithdrawalStatus(uint256,uint256)",
          "_checkTenPecentOfStableToken(uint256,address)",
          "_depositStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "whitelistedTokens",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:69"
            },
            {
              "label": "initialTenPercentOfInvestor",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:70"
            },
            {
              "label": "initialInvestorId",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:71"
            },
            {
              "label": "projectCycle",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_uint256,t_struct(founderLink)4178_storage)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:78"
            },
            {
              "label": "projectIdAndFounder",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:79"
            },
            {
              "label": "es",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:80"
            },
            {
              "label": "founderLinkInvestorInitialProposal",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(founderSettingInvestorToTheProposal)4276_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:110"
            },
            {
              "label": "initialAndProjLinkInvestor",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(founderSettingInvestorToTheProposal)4276_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:111"
            },
            {
              "label": "justInvestor",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(initialAndInvestor)4281_storage)dyn_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:112"
            },
            {
              "label": "ids",
              "offset": 0,
              "slot": "210",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:113"
            },
            {
              "label": "idsSub",
              "offset": 0,
              "slot": "211",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:138"
            },
            {
              "label": "SUBS",
              "offset": 0,
              "slot": "212",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(getSubsequentData)4447_storage)dyn_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:146"
            },
            {
              "label": "Subinvestors",
              "offset": 0,
              "slot": "213",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:147"
            },
            {
              "label": "subsCycleBalance",
              "offset": 0,
              "slot": "214",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:148"
            },
            {
              "label": "approvals",
              "offset": 0,
              "slot": "215",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:173"
            },
            {
              "label": "rejections",
              "offset": 0,
              "slot": "216",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:174"
            },
            {
              "label": "subStatus",
              "offset": 0,
              "slot": "217",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:175"
            },
            {
              "label": "isSubsequentCreatedOrNot",
              "offset": 0,
              "slot": "218",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:176"
            },
            {
              "label": "withdrawlSetup",
              "offset": 0,
              "slot": "219",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:177"
            },
            {
              "label": "projectRejectionStatus",
              "offset": 0,
              "slot": "220",
              "type": "t_bool",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:178"
            },
            {
              "label": "initialNinentyInvestor",
              "offset": 0,
              "slot": "221",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:210"
            },
            {
              "label": "AI",
              "offset": 0,
              "slot": "222",
              "type": "t_mapping(t_uint256,t_struct(allInvestorBool)4797_storage)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:219"
            },
            {
              "label": "ALLinvestors",
              "offset": 0,
              "slot": "223",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:220"
            },
            {
              "label": "tokenContract",
              "offset": 0,
              "slot": "224",
              "type": "t_address",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:222"
            },
            {
              "label": "seperateContractLink",
              "offset": 0,
              "slot": "225",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:223"
            },
            {
              "label": "subsequentIdStatus",
              "offset": 0,
              "slot": "226",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:256"
            },
            {
              "label": "getProjectEscrowBalance",
              "offset": 0,
              "slot": "227",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:333"
            },
            {
              "label": "getInvestorInvestedBalance",
              "offset": 0,
              "slot": "228",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:339"
            },
            {
              "label": "getInvestorCurrentBalance",
              "offset": 0,
              "slot": "229",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:345"
            },
            {
              "label": "getTotalReleasedFundsToFounderFromEscrow",
              "offset": 0,
              "slot": "230",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:351"
            },
            {
              "label": "getInitialProposalRequestedFund",
              "offset": 0,
              "slot": "231",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:357"
            },
            {
              "label": "getSubsequentProposalFund",
              "offset": 0,
              "slot": "232",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:363"
            },
            {
              "label": "getProjectCycles",
              "offset": 0,
              "slot": "233",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:369"
            },
            {
              "label": "getProjectCurrentCycle",
              "offset": 0,
              "slot": "234",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:375"
            },
            {
              "label": "getSubsequentProposalStatus",
              "offset": 0,
              "slot": "235",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:381"
            },
            {
              "label": "getRejectedSubsequentProposalsCounts",
              "offset": 0,
              "slot": "236",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:387"
            },
            {
              "label": "getProjectStatus",
              "offset": 0,
              "slot": "237",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:393"
            },
            {
              "label": "getTotalProjectValue",
              "offset": 0,
              "slot": "238",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:409"
            },
            {
              "label": "getTheTenpercentWithdrawalStatus",
              "offset": 0,
              "slot": "239",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:415"
            },
            {
              "label": "getTheSubsequentProposalWithdrawalStatus",
              "offset": 0,
              "slot": "240",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:421"
            },
            {
              "label": "_depositStatusByInvestor",
              "offset": 0,
              "slot": "241",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "ProjectAndProposal",
              "src": "contracts/ProjectAndProposal.sol:434"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(getSubsequentData)4447_storage)dyn_storage": {
              "label": "struct ProjectAndProposal.getSubsequentData[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(initialAndInvestor)4281_storage)dyn_storage": {
              "label": "struct ProjectAndProposal.initialAndInvestor[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(getSubsequentData)4447_storage)dyn_storage)": {
              "label": "mapping(address => struct ProjectAndProposal.getSubsequentData[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(initialAndInvestor)4281_storage)dyn_storage)": {
              "label": "mapping(address => struct ProjectAndProposal.initialAndInvestor[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(founderSettingInvestorToTheProposal)4276_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ProjectAndProposal.founderSettingInvestorToTheProposal))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
              "label": "mapping(uint256 => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
              "label": "mapping(uint256 => mapping(address => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(getSubsequentData)4447_storage)dyn_storage))": {
              "label": "mapping(uint256 => mapping(address => struct ProjectAndProposal.getSubsequentData[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(initialAndInvestor)4281_storage)dyn_storage))": {
              "label": "mapping(uint256 => mapping(address => struct ProjectAndProposal.initialAndInvestor[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
              "label": "mapping(uint256 => mapping(uint256 => address[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(uint256 => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
              "label": "mapping(uint256 => mapping(uint256 => string))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(founderSettingInvestorToTheProposal)4276_storage))": {
              "label": "mapping(uint256 => mapping(uint256 => struct ProjectAndProposal.founderSettingInvestorToTheProposal))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(uint256 => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(allInvestorBool)4797_storage)": {
              "label": "mapping(uint256 => struct ProjectAndProposal.allInvestorBool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(founderLink)4178_storage)": {
              "label": "mapping(uint256 => struct ProjectAndProposal.founderLink)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(founderSettingInvestorToTheProposal)4276_storage)": {
              "label": "mapping(uint256 => struct ProjectAndProposal.founderSettingInvestorToTheProposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(allInvestorBool)4797_storage": {
              "label": "struct ProjectAndProposal.allInvestorBool",
              "members": [
                {
                  "label": "allInvestors",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "validator",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_state",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_investor",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(founderLink)4178_storage": {
              "label": "struct ProjectAndProposal.founderLink",
              "members": [
                {
                  "label": "projectId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cycles",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(founderSettingInvestorToTheProposal)4276_storage": {
              "label": "struct ProjectAndProposal.founderSettingInvestorToTheProposal",
              "members": [
                {
                  "label": "_initialId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_amountForProposal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_investor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_initial10PercentOfInvestor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(getSubsequentData)4447_storage": {
              "label": "struct ProjectAndProposal.getSubsequentData",
              "members": [
                {
                  "label": "subsequentId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "subsequentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "investors",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(initialAndInvestor)4281_storage": {
              "label": "struct ProjectAndProposal.initialAndInvestor",
              "members": [
                {
                  "label": "_initialId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_investor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "pp_lock": {
        "src": "contracts/ProjectAndProposal.sol:440",
        "version": {
          "withMetadata": "68b4e30a492a03fa73707ba543ccd0890565277b809f85bfceff4a9a2571f367",
          "withoutMetadata": "210445866bbf1c86c86571c6e4254eb782c5a1cf53cc0e1bce35876d11424b0d",
          "linkedWithoutMetadata": "210445866bbf1c86c86571c6e4254eb782c5a1cf53cc0e1bce35876d11424b0d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "pp_lock",
            "src": "contracts/ProjectAndProposal.sol:444"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_contractOwner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "pp_lock",
              "src": "contracts/ProjectAndProposal.sol:441"
            },
            {
              "label": "_amount",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "pp_lock",
              "src": "contracts/ProjectAndProposal.sol:442"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Vesting": {
        "src": "contracts/Vesting.sol:34",
        "version": {
          "withMetadata": "0eff98b5e0b4eed7f6565f5ebead65dd458794261ce4195705e7656abf01ccac",
          "withoutMetadata": "93efb8dd83fa5dc34ce3af627c1b7568df731261b3ca90123222f12475e5c3a0",
          "linkedWithoutMetadata": "93efb8dd83fa5dc34ce3af627c1b7568df731261b3ca90123222f12475e5c3a0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "depositFounderLinearTokens(uint256,(address,address,address),bytes32,uint256,uint256,address,uint256,uint256,uint256,uint256)",
          "depositFounderLinearTokensToInvestors((address,address,address),bytes32,uint256,uint256,uint256,uint256,struct Vesting.investors[],uint256)",
          "withdrawTGEFund(address,address,uint256,bytes32)",
          "withdrawInstallmentAmount(address,address,uint256,uint256,bytes32)",
          "withdrawBatch(address,address,uint256,bytes32)",
          "currentEscrowBalanceOfInvestor(address,uint256,address)",
          "investorTGEFund(address,uint256,address)",
          "investorInstallmentFund(uint256,uint256,address)",
          "investorWithdrawnFund(address,uint256)",
          "returnRemainingFundExcludingTGE(address,address,uint256)",
          "investorUnlockedFund(address,address,uint256)",
          "setNonLinearInstallments(address,address,uint256,address,struct Vesting.due[])",
          "depositFounderNonLinearTokens(address,address,address,bytes32,uint256,uint256,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "whitelistedTokens",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Vesting",
              "src": "contracts/Vesting.sol:36"
            },
            {
              "label": "vs",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_struct(vestingSchedule)6073_storage)",
              "contract": "Vesting",
              "src": "contracts/Vesting.sol:63"
            },
            {
              "label": "vestingDues",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(installment)6086_storage))",
              "contract": "Vesting",
              "src": "contracts/Vesting.sol:64"
            },
            {
              "label": "installmentCount",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "Vesting",
              "src": "contracts/Vesting.sol:65"
            },
            {
              "label": "investorWithdrawBalance",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "Vesting",
              "src": "contracts/Vesting.sol:66"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(installment)6086_storage)": {
              "label": "mapping(address => struct Vesting.installment)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(vestingSchedule)6073_storage)": {
              "label": "mapping(address => struct Vesting.vestingSchedule)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(installment)6086_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Vesting.installment))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(installment)6086_storage": {
              "label": "struct Vesting.installment",
              "members": [
                {
                  "label": "_date",
                  "type": "t_mapping(t_uint256,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_status",
                  "type": "t_mapping(t_uint256,t_bool)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_fund",
                  "type": "t_mapping(t_uint256,t_uint256)",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(vestingSchedule)6073_storage": {
              "label": "struct Vesting.vestingSchedule",
              "members": [
                {
                  "label": "depositsOfFounderTokensToInvestor",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "depositsOfFounderCurrentTokensToInvestor",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tgeDate",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tgePercentage",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "vestingStartDate",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "vestingMonths",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "tgeFund",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "remainingFundForInstallments",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "installmentAmount",
                  "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    }
  ]
}